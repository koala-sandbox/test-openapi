/*
 * test-openapi API
 *
 * template for test-openapi API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ItemApiController binds http requests to an api service and writes the service results to the http response
type ItemApiController struct {
	service      ItemApiServicer
	errorHandler ErrorHandler
}

// ItemApiOption for how the controller is set up.
type ItemApiOption func(*ItemApiController)

// WithItemApiErrorHandler inject ErrorHandler into controller
func WithItemApiErrorHandler(h ErrorHandler) ItemApiOption {
	return func(c *ItemApiController) {
		c.errorHandler = h
	}
}

// NewItemApiController creates a default api controller
func NewItemApiController(s ItemApiServicer, opts ...ItemApiOption) Router {
	controller := &ItemApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ItemApiController
func (c *ItemApiController) Routes() Routes {
	return Routes{
		{
			"GetItemById",
			strings.ToUpper("Get"),
			"/items/{itemId}",
			c.GetItemById,
		},
		{
			"ItemsGet",
			strings.ToUpper("Get"),
			"/items",
			c.ItemsGet,
		},
		{
			"UpdateItemWithForm",
			strings.ToUpper("Post"),
			"/items/{itemId}",
			c.UpdateItemWithForm,
		},
	}
}

// GetItemById - Find item by ID
func (c *ItemApiController) GetItemById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam, err := parseInt64Parameter(params["itemId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	result, err := c.service.GetItemById(r.Context(), itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ItemsGet -
func (c *ItemApiController) ItemsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ItemsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateItemWithForm - Updates a item with form data
func (c *ItemApiController) UpdateItemWithForm(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	itemIdParam, err := parseInt64Parameter(params["itemId"], true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}

	idParam, err := parseInt64Parameter(r.FormValue("id"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	nameParam := r.FormValue("name")
	result, err := c.service.UpdateItemWithForm(r.Context(), itemIdParam, idParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
