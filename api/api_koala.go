/*
 * test-openapi API
 *
 * template for test-openapi API
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"
	"strings"
)

// KoalaApiController binds http requests to an api service and writes the service results to the http response
type KoalaApiController struct {
	service      KoalaApiServicer
	errorHandler ErrorHandler
}

// KoalaApiOption for how the controller is set up.
type KoalaApiOption func(*KoalaApiController)

// WithKoalaApiErrorHandler inject ErrorHandler into controller
func WithKoalaApiErrorHandler(h ErrorHandler) KoalaApiOption {
	return func(c *KoalaApiController) {
		c.errorHandler = h
	}
}

// NewKoalaApiController creates a default api controller
func NewKoalaApiController(s KoalaApiServicer, opts ...KoalaApiOption) Router {
	controller := &KoalaApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KoalaApiController
func (c *KoalaApiController) Routes() Routes {
	return Routes{
		{
			"GetKoala",
			strings.ToUpper("Get"),
			"/koala",
			c.GetKoala,
		},
	}
}

// GetKoala -
func (c *KoalaApiController) GetKoala(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetKoala(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
